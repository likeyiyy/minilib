!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
INIT_LIST_HEAD	list.c	/^void INIT_LIST_HEAD(struct list_head *list)$/;"	f
__LIST_H_	list.h	10;"	d
__list_add	list.c	/^static inline void __list_add(struct list_head *new,$/;"	f	file:
__list_del	list.c	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f	file:
blist	list.h	/^struct blist$/;"	s
compare_int	main.c	/^int compare_int(void * a, void * b)$/;"	f
compare_item	list.h	/^    int (* compare_item)(void * listitem, void * item);$/;"	m	struct:list_head
compare_item_fp	list.h	/^typedef int (*compare_item_fp)(void * a,void *b);$/;"	t
item	list.h	/^    void * item;$/;"	m	struct:blist
list_add	list.c	/^void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_after_item	list.c	/^int list_add_after_item(struct list_head * head, $/;"	f
list_add_before_item	list.c	/^int list_add_before_item(struct list_head * head, $/;"	f
list_add_tail	list.c	/^void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	list.c	/^void list_del(struct list_head *entry)$/;"	f
list_del_item	list.c	/^int list_del_item(struct list_head * head, $/;"	f
list_empty	list.c	/^int list_empty(const struct list_head *head)$/;"	f
list_entry	list.c	63;"	d	file:
list_find	list.c	/^struct blist * list_find(struct list_head * head, void * item)$/;"	f
list_for_each	list.c	66;"	d	file:
list_for_each_safe	list.c	70;"	d	file:
list_head	list.h	/^struct list_head {$/;"	s
list_init	list.c	/^struct list_head * list_init(compare_item_fp compare_fp, view_item_fp view_fp)$/;"	f
list_modify_item	list.c	/^int list_modify_item(struct list_head * head,$/;"	f
list_move_tail	list.c	/^void list_move_tail(struct list_head *list,$/;"	f
list_view	list.c	/^void list_view(struct list_head * head)$/;"	f
listhead	list.h	/^	struct list_head listhead;$/;"	m	struct:blist	typeref:struct:blist::list_head
main	main.c	/^int main()$/;"	f
next	list.h	/^	struct list_head* next; $/;"	m	struct:list_head	typeref:struct:list_head::list_head
prev	list.h	/^	struct list_head* prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
view_int	main.c	/^int view_int(void * a)$/;"	f
view_item	list.h	/^    int (* view_item)(void * listitem);$/;"	m	struct:list_head
view_item_fp	list.h	/^typedef int (*view_item_fp)(void * a);$/;"	t
